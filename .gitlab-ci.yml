variables:
  # maven参数
  MAVEN_CLI_OPTS: "-s settings.xml --batch-mode"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  
  # DOCKER_HOST 和 DOCKER_DRIVER 用于连接宿主机docker服务
  DOCKER_HOST: tcp://192.168.1.172:2375
  DOCKER_DRIVER: overlay2
  
  # maven 构建生成的jar包或jar包相对于源码家目录的路径
  APP_FILE_PATH: "target/*.war"
  
  # 生成docker容器的基础镜像名称，设置成私有仓库进行加快镜像构建速度，如不设置默认从互联网下载
  BASE_IMAGE: "192.168.0.173:5001/java:8"
  
  # 镜像仓库地址
  REGISTRY_ADDRESS: "192.168.0.173:5001"
  
  # 将容器部署到这个主机上，需将容器的237端口开启，更改docker.service文件在“ExecStart=”加上“-H tcp://0.0.0.0:2375”
  DEPLOY_TO_HOST: "tcp://192.168.3.172:2375"
  
  RUN_ENV:
    value: "stop"  
    description: "该变量的值决定应用具体使用哪套配置构建，如输入'test' 或 'dev'镜像构建, 默认为 'stop'禁止构建."
    
# 缓存maven仓库提高编译速度
cache:
  key: maven-repo
  paths:
    - .m2/repository/

# 只有当RUN_ENV的值为dev或test时才运行pipeline
workflow:
  rules:
    - if: '$RUN_ENV == "dev"'
    - if: '$RUN_ENV == "test"'
    - when: never

# 定义整个pipeline步骤
stages:
  - maven_build
  - docker_build
  - deploy
  
  
# artifacts保存maven生成的产物用于后续步骤构建镜像
# tags：docker 定义拥有docker这个tag的runner才能调动该步骤
maven_build:
  image: $REGISTRY_ADDRESS/maven:3.3.9-jdk-8
  stage: maven_build
  script:
    - mvn $MAVEN_CLI_OPTS clean install
  artifacts:
    paths:
      - $APP_FILE_PATH
    expire_in: 1 day 
  tags:
    - docker          


# 该段代码的作用是使用maven_build阶段生成的中间产物构建镜像并上传到镜像仓库，用于后续docker-compose远程部署
docker_build:
  before_script:
    - docker info
    - docker login $REGISTRY_ADDRESS -u admin -p $REGISTRY_PASSWORD
    - docker build --build-arg APP_FILE_PATH --build-arg BASE_IMAGE --build-arg RUN_ENV -t $REGISTRY_ADDRESS/wb-system:$CI_COMMIT_SHORT_SHA .
  image: $REGISTRY_ADDRESS/docker:19.03.13
  stage: docker_build
  script: 
    - >
      if [[ "$RUN_ENV" == "dev" ]]; then
        docker push $REGISTRY_ADDRESS/wb-system:$CI_COMMIT_SHORT_SHA
      elif [[ "$RUN_ENV" == "test" ]]; then
        docker save $REGISTRY_ADDRESS/wb-system:$CI_COMMIT_SHORT_SHA -o wb-system.tar
        chmod 777 wb-system.tar
      fi
  tags:
    - docker


# 通过docker-compose部署
deploy_to_dev:
  before_script:
    - docker-compose version
  image: $REGISTRY_ADDRESS/docker-compose:19.03
  stage: deploy 
  script:
    - echo "部署到:$RUN_ENV"
    - docker-compose -f docker-compose.yml -H $DEPLOY_TO_HOST up -d   
  tags:
    - docker  
  rules:
    - if: $RUN_ENV == "dev"


# 拷贝docker-compose.yml和镜像tar包到阿里云服务器上并运行   
# 该centos image提前做了免密登录，此处也可以通过阿里云提供的python sdk实现上传文件和运行命令的操作
deploy_to_test:
  stage: deploy
  image: $REGISTRY_ADDRESS/centos-ssh:7
  after_script:
    - ssh test@ip "rm -f /tmp/wb-system.tar && rm -f /tmp/docker-compose.yml"
  script:
    - scp wb-system.tar test@ip:/tmp 
    - sed -i "s#\$REGISTRY_ADDRESS#$REGISTRY_ADDRESS#g" docker-compose.yml 
    - sed -i "s#\$CI_COMMIT_SHORT_SHA#$CI_COMMIT_SHORT_SHA#g" docker-compose.yml 
    - sed -i "s#\${RUN_ENV}#$RUN_ENV#g" docker-compose.yml 
    - scp docker-compose.yml test@ip:/tmp
    - ssh test@ip "docker load -i /tmp/wb-system.tar && docker-compose -f /tmp/docker-compose.yml up -d"
  tags:
    - docker     
  rules:
    - if: $RUN_ENV == "test"
